  Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.
  
  
  
  
  int maxPoints(vector<vector<int>>& points) {
        
        
        if(points.size()<=2)
            return points.size();
         
        int mx=2;
        
        for(int i=0;i<points.size()-2;i++)
        {
            for(int j=i+1;j<points.size()-1;j++)
            {
                int ans=2;
                
                for(int k=j+1;k<points.size();k++)
                {
if((points[k][0]-points[i][0])*(points[j][1]-points[i][1])==(points[k][1]-points[i][1])*(points[j][0]-points[i][0]))
                 ans++;
                }
                
                
                mx=max(mx,ans);
                
            }
        }
        
    
        
        return mx;
        
    }
    
    
    
    O(N*N);
    
    
    class Solution {
public:
    int maxPoints(vector<Point>& points) {
        int n = points.size(), ans = 0;
        for (int i = 0; i < n; i++) {
            unordered_map<string, int> counter;
            int dup = 1;
            for (int j = i + 1; j < n; j++) {
                if (points[j].x == points[i].x && points[j].y == points[i].y) {
                    dup++;
                } else {
                    int dx = points[j].x - points[i].x, dy = points[j].y - points[i].y, g = gcd(dx, dy);
                    counter[to_string(dx / g) + '_' + to_string(dy / g)]++;
                }
            }
            ans = max(ans, dup);
            for (auto p : counter) {
                ans = max(ans, p.second + dup);
            }
        }
        return ans;
    }
private:
    int gcd(int a, int b) {
        while (b) {
            a = a % b;
            swap(a, b);
        }
        return a;
    }
};
