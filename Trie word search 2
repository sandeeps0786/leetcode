class Solution {
public:
    struct Trienode{ 
       string word="";                     // making word;
        int c=0;
        Trienode *children[26];
        
        Trienode()
        {
            for(int i=0;i<26;i++)
                 children[i]=nullptr;
        }
        
    };
    Trienode* build(vector<string>word)
    {
        Trienode* root=new Trienode();
        
         for(int i=0;i<word.size();i++)
         {
             string temp=word[i];
             Trienode* curr=root;
             
               for(int j=0;j<temp.length();j++)
               {
                   
                    if(curr->children[temp[j]-'a']==nullptr)
                    {
                        curr->children[temp[j]-'a']=new Trienode();
                    }
                   
                     
                  
                   curr=curr->children[temp[j]-'a'];
                   
               }
             
              curr->word=temp;
             curr->c+=1;
             
             
         }
        
        return root;
        
     }
   // board[i][j]  make it itself worked as visited array 
    void h(int i,int j,Trienode* root,vector<vector<char>>& board,vector<string>&ans)
    {
          
   
        
          if(i<0||j<0||i>=board.size()||j>=board[i].size()||board[i][j]=='#'||root->children[board[i][j]-'a']==nullptr)
              return;
        
           
             char x=board[i][j];
         root=root->children[board[i][j]-'a'];
        
        
          if(root->c>0)
          {
              ans.push_back(root->word);
             root->c-=1;
          }
        
          board[i][j]='#';
        
     
           h(i,j-1,root,board,ans);
        h(i+1,j,root,board,ans);
        h(i,j+1,root,board,ans);
        h(i-1,j,root,board,ans);
        
        board[i][j]=x;
        
        
    }
    vector<string> findWords(vector<vector<char>>& board, vector<string>& words) {
     
        
          Trienode* root=build(words);
          
        int n=board.size();
        int m=board[0].size();
        
          
       
        vector<string>ans;
          
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                 
                if(root->children[board[i][j]-'a']!=nullptr)
                  h(i,j,root,board,ans);
                
                 
            }
        }
        
        
        return ans;
          
    }
};
