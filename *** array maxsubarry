Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


my mistake using kadane algo but not thinking that  sum =1  nums[i] =4   then also first condtiton is satisified;


 int maxSubArray(vector<int>& nums) {
           int sum=nums[0],ans=nums[0];                  // start both with first index INT_MIN will create problem;
        
        for(int i=1;i<nums.size();i++)
        {
            if(sum<nums[i]&&sum<0)                       // sum<0 then it will exchange other wise leave it
            {
               
                sum=0;
            }
            
            sum+=nums[i];
            ans=max(ans,sum);
                
        }
        return ans;
    }

***************************dp sonlution

int n = A.length;
        int[] dp = new int[n];//dp[i] means the maximum subarray ending with A[i];
        dp[0] = A[0];
        int max = dp[0];
        
        for(int i = 1; i < n; i++){
            dp[i] = A[i] + (dp[i - 1] > 0 ? dp[i - 1] : 0);               if the sum<0 then we do tis
            max = Math.max(max, dp[i]);
        }
        
        return max;
