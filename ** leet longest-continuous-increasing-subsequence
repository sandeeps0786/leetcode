 Given an unsorted array of integers nums, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.

A continuous increasing subsequence is defined by two indices l and r (l < r) such that it is [nums[l], nums[l + 1], ..., nums[r - 1], nums[r]] and for each l <= i < r, nums[i] < nums[i + 1].

 

Example 1:

Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.
Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.
       
       
c=1 because you are starting with index 1;
       long long int n=nums.size();
        int dp[n],ans=1,c=1;
       
        for(int i=1;i<n;i++)
        {
            if(nums[i]>nums[i-1])
            {
                c++;
                ans=max(c,ans);
                
            }
            else
                c=1;
            
        }
        return ans;
