


class LRUCache {
public:
    struct Node
     {
        int key;
     int data;
     struct Node *next;
     struct Node *prev;
     }; 
    
         Node* head= new Node();
         Node* tail=new Node();
    
         map<int,Node*>m;
         int n;
    
    
    void add(Node *node)
    {
        Node* temp=head->next;
        head->next=node;
        node->prev=head;
        node->next=temp;
        temp->prev=node;
           
    }
    
    void remove(Node *node)
    {
            Node* temp1=node->next;
        Node* temp=node->prev;
    
        temp->next=temp1;
        temp1->prev=temp;
        
                
        

    }
    
    LRUCache(int capacity) {
         n=capacity;
        head->next=tail;
        tail->prev=head;
      
         
    }
    
    int get(int key) {
        
        if(m.find(key)==m.end())
        {
            return -1;
        }
        else
        {
            Node* temp=m[key];
            remove(temp);
            add(temp);
            
            return temp->data;
            
        }
        
        
    }
    
    void put(int key, int value) {
           
           if(m.find(key)!=m.end())
           {
               remove(m[key]);       // remove
               m[key]->data=value;   //value change
               
               add(m[key]);             // add to dll
           }
           else
           {
               if(m.size()==n)
               {
                    m.erase(tail->prev->key);                                                // mistake key also be stored;
                   remove(tail->prev);    // remove from dll and map as well last value;
                  
              }
               
               Node* temp=new Node();
               temp->key=key;
               temp->data=value;
               
               m[key]=temp;
               
                 add(temp);                   // mistake i was passing  add(m[key]);
           }
    }
};
